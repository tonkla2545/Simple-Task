const { body, validationResult, query } = require("express-validator");

class Validator {
    // üîπ Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation Errors
    static validate(req, res, next) {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        console.log("Validation Passed"); // ‚úÖ Debug ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
        next();
    }


    // üîπ Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô Register
    static registerValidator() {
        return [
            body("username")
                .trim()
                .notEmpty().withMessage("Username is required")
                .isLength({ min: 3 }).withMessage("Username must be at least 3 characters long"),

            body("password")
                .notEmpty().withMessage("Password is required")
                .isLength({ min: 6 }).withMessage("Password must be at least 6 characters long"),

            body("confirmPass")
                .notEmpty().withMessage("Confirm Password is required")
                .custom((value, { req }) => {
                    if (value !== req.body.password) {
                        throw new Error("Passwords do not match");
                    }
                    return true;
                })
        ];
    }

    static loginValidator() {
        return [
            body("username").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
            body("password").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
        ]
    }

    static insertValidator() {
        return [
            body("title").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"),
            body("description").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"),
            body("status").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
            body("priority").notEmpty().withMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"),
        ]
    }

    static searchTaskValidator() {
        return [
            query("title").optional().isString().withMessage("Title ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"),
            query("status").optional().isIn(["pending", "completed", "in-progress"])
                .withMessage("Status ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô pending, completed ‡∏´‡∏£‡∏∑‡∏≠ in-progress"),
        ]
    }
}

module.exports = Validator;
